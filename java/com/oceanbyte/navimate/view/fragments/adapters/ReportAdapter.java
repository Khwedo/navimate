package com.oceanbyte.navimate.view.fragments.adapters;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.RecyclerView;

import com.oceanbyte.navimate.R;
import com.oceanbyte.navimate.models.JobReport;
import com.oceanbyte.navimate.models.ReportListItem;
import com.oceanbyte.navimate.utils.ReportUtils;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ReportAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    private static final int TYPE_HEADER = 0; // TYPE_HEADER ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 03 ‚Äî 09 June
    private static final int TYPE_ITEM = 1;   // TYPE_ITEM ‚Äî –æ–±—ã—á–Ω—ã–π –æ—Ç—á—ë—Ç

    private final List<ReportListItem> items = new ArrayList<>(); // ReportListItem ‚Äî —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç:
    private final Set<Long> selectedIds = new HashSet<>();

    /** –≠—Ç–æ –∫–æ–ª–±—ç–∫–∏, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ Fragment —É–∑–Ω–∞—ë—Ç:

 –∫–∞–∫–æ–π –æ—Ç—á—ë—Ç –±—ã–ª –Ω–∞–∂–∞—Ç;

 –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –æ—Ç—á—ë—Ç;

 –Ω–∞–∂–∞–ª–∏ –ª–∏ –¥–æ–ª–≥–æ;

 –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á–∏—Å–ª–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.*/


    private final OnReportClickListener listener;
    private OnAddReportClickListener onAddReportClickListener;
    private OnReportLongClickListener longClickListener;
    private OnSelectionChangedListener selectionChangedListener;

    private boolean selectionEnabled = false;

    public interface OnReportClickListener {
        void onReportClick(JobReport report);
    }

    public interface OnAddReportClickListener {
        void onAddReportClick(String weekTitle);
    }

    public interface OnReportLongClickListener {
        void onLongClick();
    }

    public ReportAdapter(List<ReportListItem> groupedItems, OnReportClickListener listener) {
        this.items.addAll(groupedItems);
        this.listener = listener;
    }

    public void setOnAddReportClickListener(OnAddReportClickListener listener) {
        this.onAddReportClickListener = listener;
    }

    public void setOnReportLongClickListener(OnReportLongClickListener listener) {
        this.longClickListener = listener;
    }

    public void setOnSelectionChangedListener(OnSelectionChangedListener listener) {
        this.selectionChangedListener = listener;
    }
/**DiffUtil ‚Äî —ç—Ç–æ —É–º–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–∑ –º–æ—Ä–≥–∞–Ω–∏—è.
 * –û–Ω —Å—á–∏—Ç–∞–µ—Ç, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —É–¥–∞–ª–∏–ª–∏—Å—å, –¥–æ–±–∞–≤–∏–ª–∏—Å—å, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ö.*/

    public void setItems(List<ReportListItem> newItems) {
        DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new ReportDiffCallback(this.items, newItems));
        this.items.clear(); // üëà –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤–Ω–∏–∑
        diffResult.dispatchUpdatesTo(this); // üëà —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        this.items.addAll(newItems);       // üëà —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    }

    public List<JobReport> getSelectedReports() {
        List<JobReport> selectedReports = new ArrayList<>();
        for (ReportListItem item : items) {
            if (!item.isHeader && item.report != null && selectedIds.contains(item.report.id)) {
                selectedReports.add(item.report);
            }
        }
        return selectedReports;
    }
/** –î–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç ID*/
    public void toggleSelection(long reportId) {
        boolean changed;
        if (selectedIds.contains(reportId)) {
            selectedIds.remove(reportId);
            changed = true;
        } else {
            selectedIds.add(reportId);
            changed = true;
        }

        if (changed) {
            if (selectionChangedListener != null) {
                selectionChangedListener.onSelectionChanged(selectedIds.size());
            }
        }

        // –í–ê–ñ–ù–û: —Ñ–ª–∞–≥ –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–æ–ª–±—ç–∫–∞
        setSelectionEnabled(!selectedIds.isEmpty());
    }
    /**–û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä*/
    public void clearSelections() {
        selectedIds.clear();
        setSelectionEnabled(false);
    }

    public boolean hasSelection() {
        return !selectedIds.isEmpty();
    }

    public Set<Long> getSelectedIds() {
        return new HashSet<>(selectedIds);
    }

    public void restoreSelections(Set<Long> savedIds) {
        if (savedIds != null) {
            selectedIds.clear();
            selectedIds.addAll(savedIds);
            setSelectionEnabled(!selectedIds.isEmpty());
        }
    }

    public void setSelectionEnabled(boolean enabled) {
        this.selectionEnabled = enabled;
        notifyDataSetChanged();
    }

    @Override
    public int getItemViewType(int position) {
        return items.get(position).isHeader ? TYPE_HEADER : TYPE_ITEM;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
        if (viewType == TYPE_HEADER) {
            View view = inflater.inflate(R.layout.item_week_header, parent, false);
            return new HeaderViewHolder(view);
        } else {
            View view = inflater.inflate(R.layout.item_report, parent, false);
            return new ReportViewHolder(view);
        }
    }

    @Override
    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
        ReportListItem item = items.get(position);

        if (holder instanceof HeaderViewHolder) {
            ((HeaderViewHolder) holder).bind(item.header, v -> {
                if (onAddReportClickListener != null) {
                    onAddReportClickListener.onAddReportClick(item.header);
                }
            });
        } else if (holder instanceof ReportViewHolder) {
            JobReport report = item.report;
            ReportViewHolder viewHolder = (ReportViewHolder) holder;

            viewHolder.textEquipment.setText(report.equipmentName);
            viewHolder.textJobTitle.setText(report.jobTitle);
            viewHolder.textDate.setText(report.getFormattedDate());

            viewHolder.checkSelect.setOnCheckedChangeListener(null);
            boolean isSelected = selectedIds.contains(report.id);
            viewHolder.checkSelect.setChecked(isSelected);

            viewHolder.itemView.setSelected(isSelected);

            viewHolder.checkSelect.setOnCheckedChangeListener((buttonView, isChecked) -> {
                if (report.id != 0) {
                    toggleSelection(report.id);
                    notifyItemChanged(holder.getBindingAdapterPosition());
                }
            });
            if (ReportUtils.isToday(report.reportDate)) {
                viewHolder.textToday.setVisibility(View.VISIBLE);
            } else {
                viewHolder.textToday.setVisibility(View.GONE);
            }

            viewHolder.itemView.setOnClickListener(v -> {
                if (selectionEnabled) {
                    toggleSelection(report.id);
                    notifyItemChanged(holder.getBindingAdapterPosition());
                } else if (listener != null) {
                    listener.onReportClick(report);
                }
            });

            viewHolder.itemView.setOnLongClickListener(v -> {
                if (report.id != 0) {
                    toggleSelection(report.id);

                    int selectedCount = getSelectedReports().size();

                    if (selectionChangedListener != null) {
                        selectionChangedListener.onSelectionChanged(selectedCount);
                    }

                    // –í–ê–ñ–ù–û: –∑–∞–ø—É—Å–∫–∞—Ç—å longClickListener —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
                    if (selectedCount > 0 && longClickListener != null) {
                        longClickListener.onLongClick();
                    }

                    notifyItemChanged(holder.getBindingAdapterPosition());
                    return true;
                }
                return false;
            });
        }
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    static class HeaderViewHolder extends RecyclerView.ViewHolder {
        TextView textHeader;
        View btnAdd;

        public HeaderViewHolder(@NonNull View itemView) {
            super(itemView);
            textHeader = itemView.findViewById(R.id.weekTitle);
        }

        public void bind(String weekTitle, View.OnClickListener onAddClick) {
            textHeader.setText(weekTitle);
            if (btnAdd != null) {
                btnAdd.setOnClickListener(onAddClick);
            }
        }
    }

    static class ReportViewHolder extends RecyclerView.ViewHolder {
        TextView textEquipment, textJobTitle, textDate, textToday;
        CheckBox checkSelect;


        public ReportViewHolder(@NonNull View itemView) {
            super(itemView);
            textEquipment = itemView.findViewById(R.id.textEquipment);
            textJobTitle = itemView.findViewById(R.id.textJobTitle);
            textDate = itemView.findViewById(R.id.textDate);
            checkSelect = itemView.findViewById(R.id.checkSelect);
            textToday = itemView.findViewById(R.id.textToday);
        }
    }

    public int getFirstCurrentWeekIndex() {
        for (int i = 0; i < items.size(); i++) {
            ReportListItem item = items.get(i);
            if (!item.isHeader && item.report != null && ReportUtils.isCurrentWeek(item.report.reportDate)) {
                return i;
            }
        }
        return -1;
    }
    public interface OnSelectionChangedListener {
        void onSelectionChanged(int count);
    }
    public void appendItems(List<ReportListItem> newItems) {
        int startPos = items.size();
        items.addAll(newItems);
        notifyItemRangeInserted(startPos, newItems.size());
    }


}
